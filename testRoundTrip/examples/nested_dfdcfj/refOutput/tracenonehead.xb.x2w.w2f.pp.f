
C ========== begin copyright notice ==============
C This file is part of 
C ---------------
C xaifBooster
C ---------------
C Distributed under the BSD license as follows:
C Copyright (c) 2005, The University of Chicago
C All rights reserved.
C
C Redistribution and use in source and binary forms, 
C with or without modification, are permitted provided that the following conditions are met:
C
C    - Redistributions of source code must retain the above copyright notice, 
C      this list of conditions and the following disclaimer.
C    - Redistributions in binary form must reproduce the above copyright notice, 
C      this list of conditions and the following disclaimer in the documentation 
C      and/or other materials provided with the distribution.
C    - Neither the name of The University of Chicago nor the names of its contributors 
C      may be used to endorse or promote products derived from this software without 
C      specific prior written permission.
C
C THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
C EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
C OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
C SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
C INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
C PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
C INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
C LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
C OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
C 
C General Information:
C xaifBooster is intended for the transformation of 
C numerical programs represented as xml files according 
C to the XAIF schema. It is part of the OpenAD framework. 
C The main application is automatic 
C differentiation, i.e. the generation of code for 
C the computation of derivatives. 
C The following people are the principal authors of the 
C current version: 
C 	Uwe Naumann
C	Jean Utke
C Additional contributors are: 
C	Andrew Lyons
C	Peter Fine
C
C For more details about xaifBooster and its use in OpenAD please visit:
C   http://www.mcs.anl.gov/openad
C
C This work is partially supported by:
C 	NSF-ITR grant OCE-0205590
C ========== end copyright notice ==============
       subroutine head(NX,NY,X,FVEC,R)
          use OAD_trace
          use OpenAD_rev

          ! original arguments get inserted before version
          ! and declared here together with all local variables
          ! generated by xaifBooster

      use w2f__types
      use active_module
      IMPLICIT NONE
C
C     **** Parameters and Result ****
C
      INTEGER(w2f__i4) NX
      INTEGER(w2f__i4) NY
      type(active) :: X(1 : INT((NX * NY)))
      type(active) :: FVEC(1 : INT((NX * NY)))
      REAL(w2f__8) R
C
C     **** Local Variables and Functions ****
C
      EXTERNAL foo
      REAL(w2f__8) FOUR
      PARAMETER ( FOUR = 4.0D00)
      REAL(w2f__8) HX
      REAL(w2f__8) HX2
      REAL(w2f__8) HY
      REAL(w2f__8) HY2
      INTEGER(w2f__i4) K
      INTEGER(w2f__i4) N
      REAL(w2f__8) NXP1
      REAL(w2f__8) NYP1
      REAL(w2f__8) ONE
      PARAMETER ( ONE = 1.0D00)
      REAL(w2f__8) THREE
      PARAMETER ( THREE = 3.0D00)
      REAL(w2f__8) TWO
      PARAMETER ( TWO = 2.0D00)
      REAL(w2f__8) ZERO
      PARAMETER ( ZERO = 0.0D00)
C
C     **** Top Level Pragmas ****
C
C$OPENAD INDEPENDENT(X)
C$OPENAD DEPENDENT(FVEC)
C
C     **** Statements ****
C

          integer iaddr
          external iaddr

         if (our_rev_mode%plain) then
! original function
C$OPENAD XXX Template ad_template.f
      N = NX * NY
      NXP1 = (NX + 1)
      NYP1 = (NY + 1)
      HX = (1.0D00 / NXP1)
      HY = (1.0D00 / NYP1)
      HY2 = (HY * HY)
      HX2 = (HX * HX)
      CALL foo(NX,NY,X,FVEC,R,N,HX,HY,HY2,HX2)
      DO K = 1, N, 1
        FVEC(INT(K))%v = (FVEC(K)%v*HX2*HY2)
      END DO
          end if
          if (our_rev_mode%tape) then
! tracing
C$OPENAD XXX Template ad_template.f
      N = NX * NY
      NXP1 = (NX + 1)
      NYP1 = (NY + 1)
      HX = (1.0D00 / NXP1)
      HY = (1.0D00 / NYP1)
      HY2 = (HY * HY)
      HX2 = (HX * HX)
C!! requested inline of 'oad_trace_call' has no defn
      CALL oad_trace_call('foo', 124_w2f__i8)
C!! requested inline of 'oad_trace_arg' has no defn
      CALL oad_trace_arg('NX')
C!! requested inline of 'oad_trace_earg' has no defn
      CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
      CALL oad_trace_arg('NY')
C!! requested inline of 'oad_trace_earg' has no defn
      CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
      CALL oad_trace_arg('X')
C!! requested inline of 'oad_trace_earg' has no defn
      CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
      CALL oad_trace_arg('FVEC')
C!! requested inline of 'oad_trace_earg' has no defn
      CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
      CALL oad_trace_arg('R')
C!! requested inline of 'oad_trace_earg' has no defn
      CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
      CALL oad_trace_arg('N')
C!! requested inline of 'oad_trace_earg' has no defn
      CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
      CALL oad_trace_arg('HX')
C!! requested inline of 'oad_trace_earg' has no defn
      CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
      CALL oad_trace_arg('HY')
C!! requested inline of 'oad_trace_earg' has no defn
      CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
      CALL oad_trace_arg('HY2')
C!! requested inline of 'oad_trace_earg' has no defn
      CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
      CALL oad_trace_arg('HX2')
C!! requested inline of 'oad_trace_earg' has no defn
      CALL oad_trace_earg()
      CALL foo(NX,NY,X,FVEC,R,N,HX,HY,HY2,HX2)
C!! requested inline of 'oad_trace_ecall' has no defn
      CALL oad_trace_ecall()
      DO K = 1, N, 1
        FVEC(INT(K))%v = (FVEC(K)%v*HX2*HY2)
      END DO
          end if 
        end subroutine head
C ========== begin copyright notice ==============
C This file is part of 
C ---------------
C xaifBooster
C ---------------
C Distributed under the BSD license as follows:
C Copyright (c) 2005, The University of Chicago
C All rights reserved.
C
C Redistribution and use in source and binary forms, 
C with or without modification, are permitted provided that the following conditions are met:
C
C    - Redistributions of source code must retain the above copyright notice, 
C      this list of conditions and the following disclaimer.
C    - Redistributions in binary form must reproduce the above copyright notice, 
C      this list of conditions and the following disclaimer in the documentation 
C      and/or other materials provided with the distribution.
C    - Neither the name of The University of Chicago nor the names of its contributors 
C      may be used to endorse or promote products derived from this software without 
C      specific prior written permission.
C
C THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
C EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
C OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
C SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
C INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
C PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
C INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
C LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
C OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
C 
C General Information:
C xaifBooster is intended for the transformation of 
C numerical programs represented as xml files according 
C to the XAIF schema. It is part of the OpenAD framework. 
C The main application is automatic 
C differentiation, i.e. the generation of code for 
C the computation of derivatives. 
C The following people are the principal authors of the 
C current version: 
C 	Uwe Naumann
C	Jean Utke
C Additional contributors are: 
C	Andrew Lyons
C	Peter Fine
C
C For more details about xaifBooster and its use in OpenAD please visit:
C   http://www.mcs.anl.gov/openad
C
C This work is partially supported by:
C 	NSF-ITR grant OCE-0205590
C ========== end copyright notice ==============
       subroutine foo(NX,NY,X,FVEC,R,N,HX,HY,HY2,HX2)
          use OAD_trace
          use OpenAD_rev

          ! original arguments get inserted before version
          ! and declared here together with all local variables
          ! generated by xaifBooster

      use w2f__types
      use active_module
      IMPLICIT NONE
C
C     **** Parameters and Result ****
C
      INTEGER(w2f__i4) NX
      INTEGER(w2f__i4) NY
      type(active) :: X(1 : INT((NX * NY)))
      type(active) :: FVEC(1 : INT((NX * NY)))
      REAL(w2f__8) R
      INTEGER(w2f__i4) N
      REAL(w2f__8) HX
      REAL(w2f__8) HY
      REAL(w2f__8) HY2
      REAL(w2f__8) HX2
C
C     **** Local Variables and Functions ****
C
      EXTERNAL bar
      type(active) :: DPDX
      type(active) :: DPDY
      REAL(w2f__8) FOUR
      PARAMETER ( FOUR = 4.0D00)
      INTEGER(w2f__i4) I
      INTEGER(w2f__i4) J
      INTEGER(w2f__i4) K
      REAL(w2f__8) ONE
      PARAMETER ( ONE = 1.0D00)
      type(active) :: P
      type(active) :: PB
      type(active) :: PBB
      type(active) :: PBL
      type(active) :: PBLAP
      type(active) :: PBR
      type(active) :: PL
      type(active) :: PLAP
      type(active) :: PLL
      type(active) :: PLLAP
      type(active) :: PR
      type(active) :: PRLAP
      type(active) :: PRR
      type(active) :: PT
      type(active) :: PTL
      type(active) :: PTLAP
      type(active) :: PTR
      type(active) :: PTT
      REAL(w2f__8) THREE
      PARAMETER ( THREE = 3.0D00)
      REAL(w2f__8) TWO
      PARAMETER ( TWO = 2.0D00)
      REAL(w2f__8) ZERO
      PARAMETER ( ZERO = 0.0D00)
C
C     **** Statements ****
C

          integer iaddr
          external iaddr

         if (our_rev_mode%plain) then
! original function
C$OPENAD XXX Template ad_template.f
      DO I = 1, NY, 1
        DO J = 1, NX, 1
          K = J + NX *(I +(-1))
          IF((I .eq. 1) .OR.(J .eq. 1)) THEN
            PBL%v = 0.0D00
          ELSE
            PBL%v = X(K-NX+(-1))%v
          ENDIF
          IF(I .eq. 1) THEN
            PB%v = 0.0D00
            PBB%v = X(K)%v
          ELSE
            IF(I .eq. 2) THEN
              PB%v = X(K-NX)%v
              PBB%v = 0.0D00
            ELSE
              PB%v = X(K-NX)%v
              PBB%v = X(K-NX*2)%v
            ENDIF
          ENDIF
          IF((NX .eq. J) .OR.(I .eq. 1)) THEN
            PBR%v = 0.0D00
          ELSE
            PBR%v = X(K-NX+1)%v
          ENDIF
          IF(J .eq. 1) THEN
            PL%v = 0.0D00
            PLL%v = X(K)%v
          ELSE
            IF(J .eq. 2) THEN
              PL%v = X(K+(-1))%v
              PLL%v = 0.0D00
            ELSE
              PL%v = X(K+(-1))%v
              PLL%v = X(K+(-2))%v
            ENDIF
          ENDIF
          P%v = X(K)%v
          IF(J .eq.(NX +(-1))) THEN
            PR%v = X(K+1)%v
            PRR%v = 0.0D00
          ELSE
            IF(NX .eq. J) THEN
              PR%v = 0.0D00
              PRR%v = X(K)%v
            ELSE
              PR%v = X(K+1)%v
              PRR%v = X(K+2)%v
            ENDIF
          ENDIF
          IF((NY .eq. I) .OR.(J .eq. 1)) THEN
            PTL%v = 0.0D00
          ELSE
            PTL%v = X(NX+K+(-1))%v
          ENDIF
          IF(I .eq.(NY +(-1))) THEN
            PT%v = X(NX+K)%v
            PTT%v = 0.0D00
          ELSE
            IF(NY .eq. I) THEN
              PT%v = 0.0D00
              PTT%v = (X(K)%v+HY*2.0D00)
            ELSE
              PT%v = X(NX+K)%v
              PTT%v = X(K+NX*2)%v
            ENDIF
          ENDIF
          IF((NX .eq. J) .OR.(NY .eq. I)) THEN
            PTR%v = 0.0D00
          ELSE
            PTR%v = X(NX+K+1)%v
          ENDIF
          DPDY%v = ((PT%v-PB%v)/(HY*2.0D00))
          DPDX%v = ((PR%v-PL%v)/(HX*2.0D00))
          CALL bar(PBB,PBL,PB,PBR,PLL,PL,P,PR,PRR,PTL,PT,PTR,PTT,HY2,HX2
     +,PLAP,PBLAP,PLLAP,PRLAP,PTLAP)
          FVEC(INT(K))%v = (((PBLAP%v+PTLAP%v-PLAP%v*2.0D00)/HY2)+((PLLA
     +P%v+PRLAP%v-PLAP%v*2.0D00)/HX2)-R*(((DPDY%v*(PRLAP%v-PLLAP%v))/(HX
     +*2.0D00))-((DPDX%v*(PTLAP%v-PBLAP%v))/(HY*2.0D00))))
        END DO
      END DO
          end if
          if (our_rev_mode%tape) then
! tracing
C$OPENAD XXX Template ad_template.f
      DO I = 1, NY, 1
        DO J = 1, NX, 1
          K = J + NX *(I +(-1))
          IF((I .eq. 1) .OR.(J .eq. 1)) THEN
            PBL%v = 0.0D00
          ELSE
            PBL%v = X(K-NX+(-1))%v
          ENDIF
          IF(I .eq. 1) THEN
            PB%v = 0.0D00
            PBB%v = X(K)%v
          ELSE
            IF(I .eq. 2) THEN
              PB%v = X(K-NX)%v
              PBB%v = 0.0D00
            ELSE
              PB%v = X(K-NX)%v
              PBB%v = X(K-NX*2)%v
            ENDIF
          ENDIF
          IF((NX .eq. J) .OR.(I .eq. 1)) THEN
            PBR%v = 0.0D00
          ELSE
            PBR%v = X(K-NX+1)%v
          ENDIF
          IF(J .eq. 1) THEN
            PL%v = 0.0D00
            PLL%v = X(K)%v
          ELSE
            IF(J .eq. 2) THEN
              PL%v = X(K+(-1))%v
              PLL%v = 0.0D00
            ELSE
              PL%v = X(K+(-1))%v
              PLL%v = X(K+(-2))%v
            ENDIF
          ENDIF
          P%v = X(K)%v
          IF(J .eq.(NX +(-1))) THEN
            PR%v = X(K+1)%v
            PRR%v = 0.0D00
          ELSE
            IF(NX .eq. J) THEN
              PR%v = 0.0D00
              PRR%v = X(K)%v
            ELSE
              PR%v = X(K+1)%v
              PRR%v = X(K+2)%v
            ENDIF
          ENDIF
          IF((NY .eq. I) .OR.(J .eq. 1)) THEN
            PTL%v = 0.0D00
          ELSE
            PTL%v = X(NX+K+(-1))%v
          ENDIF
          IF(I .eq.(NY +(-1))) THEN
            PT%v = X(NX+K)%v
            PTT%v = 0.0D00
          ELSE
            IF(NY .eq. I) THEN
              PT%v = 0.0D00
              PTT%v = (X(K)%v+HY*2.0D00)
            ELSE
              PT%v = X(NX+K)%v
              PTT%v = X(K+NX*2)%v
            ENDIF
          ENDIF
          IF((NX .eq. J) .OR.(NY .eq. I)) THEN
            PTR%v = 0.0D00
          ELSE
            PTR%v = X(NX+K+1)%v
          ENDIF
          DPDY%v = ((PT%v-PB%v)/(HY*2.0D00))
          DPDX%v = ((PR%v-PL%v)/(HX*2.0D00))
C!! requested inline of 'oad_trace_call' has no defn
          CALL oad_trace_call('bar', 215_w2f__i8)
C!! requested inline of 'oad_trace_arg' has no defn
          CALL oad_trace_arg('PBB')
C!! requested inline of 'oad_trace_earg' has no defn
          CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
          CALL oad_trace_arg('PBL')
C!! requested inline of 'oad_trace_earg' has no defn
          CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
          CALL oad_trace_arg('PB')
C!! requested inline of 'oad_trace_earg' has no defn
          CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
          CALL oad_trace_arg('PBR')
C!! requested inline of 'oad_trace_earg' has no defn
          CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
          CALL oad_trace_arg('PLL')
C!! requested inline of 'oad_trace_earg' has no defn
          CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
          CALL oad_trace_arg('PL')
C!! requested inline of 'oad_trace_earg' has no defn
          CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
          CALL oad_trace_arg('P')
C!! requested inline of 'oad_trace_earg' has no defn
          CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
          CALL oad_trace_arg('PR')
C!! requested inline of 'oad_trace_earg' has no defn
          CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
          CALL oad_trace_arg('PRR')
C!! requested inline of 'oad_trace_earg' has no defn
          CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
          CALL oad_trace_arg('PTL')
C!! requested inline of 'oad_trace_earg' has no defn
          CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
          CALL oad_trace_arg('PT')
C!! requested inline of 'oad_trace_earg' has no defn
          CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
          CALL oad_trace_arg('PTR')
C!! requested inline of 'oad_trace_earg' has no defn
          CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
          CALL oad_trace_arg('PTT')
C!! requested inline of 'oad_trace_earg' has no defn
          CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
          CALL oad_trace_arg('HY2')
C!! requested inline of 'oad_trace_earg' has no defn
          CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
          CALL oad_trace_arg('HX2')
C!! requested inline of 'oad_trace_earg' has no defn
          CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
          CALL oad_trace_arg('PLAP')
C!! requested inline of 'oad_trace_earg' has no defn
          CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
          CALL oad_trace_arg('PBLAP')
C!! requested inline of 'oad_trace_earg' has no defn
          CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
          CALL oad_trace_arg('PLLAP')
C!! requested inline of 'oad_trace_earg' has no defn
          CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
          CALL oad_trace_arg('PRLAP')
C!! requested inline of 'oad_trace_earg' has no defn
          CALL oad_trace_earg()
C!! requested inline of 'oad_trace_arg' has no defn
          CALL oad_trace_arg('PTLAP')
C!! requested inline of 'oad_trace_earg' has no defn
          CALL oad_trace_earg()
          CALL bar(PBB,PBL,PB,PBR,PLL,PL,P,PR,PRR,PTL,PT,PTR,PTT,HY2,HX2
     +,PLAP,PBLAP,PLLAP,PRLAP,PTLAP)
C!! requested inline of 'oad_trace_ecall' has no defn
          CALL oad_trace_ecall()
          FVEC(INT(K))%v = (((PBLAP%v+PTLAP%v-PLAP%v*2.0D00)/HY2)+((PLLA
     +P%v+PRLAP%v-PLAP%v*2.0D00)/HX2)-R*(((DPDY%v*(PRLAP%v-PLLAP%v))/(HX
     +*2.0D00))-((DPDX%v*(PTLAP%v-PBLAP%v))/(HY*2.0D00))))
        END DO
      END DO
          end if 
        end subroutine foo
C ========== begin copyright notice ==============
C This file is part of 
C ---------------
C xaifBooster
C ---------------
C Distributed under the BSD license as follows:
C Copyright (c) 2005, The University of Chicago
C All rights reserved.
C
C Redistribution and use in source and binary forms, 
C with or without modification, are permitted provided that the following conditions are met:
C
C    - Redistributions of source code must retain the above copyright notice, 
C      this list of conditions and the following disclaimer.
C    - Redistributions in binary form must reproduce the above copyright notice, 
C      this list of conditions and the following disclaimer in the documentation 
C      and/or other materials provided with the distribution.
C    - Neither the name of The University of Chicago nor the names of its contributors 
C      may be used to endorse or promote products derived from this software without 
C      specific prior written permission.
C
C THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
C EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
C OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
C SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
C INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
C PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
C INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
C LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
C OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
C 
C General Information:
C xaifBooster is intended for the transformation of 
C numerical programs represented as xml files according 
C to the XAIF schema. It is part of the OpenAD framework. 
C The main application is automatic 
C differentiation, i.e. the generation of code for 
C the computation of derivatives. 
C The following people are the principal authors of the 
C current version: 
C 	Uwe Naumann
C	Jean Utke
C Additional contributors are: 
C	Andrew Lyons
C	Peter Fine
C
C For more details about xaifBooster and its use in OpenAD please visit:
C   http://www.mcs.anl.gov/openad
C
C This work is partially supported by:
C 	NSF-ITR grant OCE-0205590
C ========== end copyright notice ==============
       subroutine bar(PBB,PBL,PB,PBR,PLL,PL,P,PR,PRR,PTL,PT,PTR,PTT,HY2,
     +HX2,PLAP,PBLAP,PLLAP,PRLAP,PTLAP)
          use OAD_trace
          use OpenAD_rev

          ! original arguments get inserted before version
          ! and declared here together with all local variables
          ! generated by xaifBooster

      use w2f__types
      use active_module
      IMPLICIT NONE
C
C     **** Parameters and Result ****
C
      type(active) :: PBB
      type(active) :: PBL
      type(active) :: PB
      type(active) :: PBR
      type(active) :: PLL
      type(active) :: PL
      type(active) :: P
      type(active) :: PR
      type(active) :: PRR
      type(active) :: PTL
      type(active) :: PT
      type(active) :: PTR
      type(active) :: PTT
      REAL(w2f__8) HY2
      REAL(w2f__8) HX2
      type(active) :: PLAP
      type(active) :: PBLAP
      type(active) :: PLLAP
      type(active) :: PRLAP
      type(active) :: PTLAP
C
C     **** Local Variables and Functions ****
C
      REAL(w2f__8) FOUR
      PARAMETER ( FOUR = 4.0D00)
      REAL(w2f__8) ONE
      PARAMETER ( ONE = 1.0D00)
      REAL(w2f__8) THREE
      PARAMETER ( THREE = 3.0D00)
      REAL(w2f__8) TWO
      PARAMETER ( TWO = 2.0D00)
      REAL(w2f__8) ZERO
      PARAMETER ( ZERO = 0.0D00)
C
C     **** Statements ****
C

          integer iaddr
          external iaddr

         if (our_rev_mode%plain) then
! original function
C$OPENAD XXX Template ad_template.f
      PBLAP%v = (((PBB%v+P%v-PB%v*2.0D00)/HY2)+((PBL%v+PBR%v-PB%v*2.0D00
     +)/HX2))
      PLLAP%v = (((PBL%v+PTL%v-PL%v*2.0D00)/HY2)+((PLL%v+P%v-PL%v*2.0D00
     +)/HX2))
      PLAP%v = (((PB%v+PT%v-P%v*2.0D00)/HY2)+((PL%v+PR%v-P%v*2.0D00)/HX2
     +))
      PRLAP%v = (((PBR%v+PTR%v-PR%v*2.0D00)/HY2)+((P%v+PRR%v-PR%v*2.0D00
     +)/HX2))
      PTLAP%v = (((P%v+PTT%v-PT%v*2.0D00)/HY2)+((PTL%v+PTR%v-PT%v*2.0D00
     +)/HX2))
          end if
          if (our_rev_mode%tape) then
! tracing
C$OPENAD XXX Template ad_template.f
      PBLAP%v = (((PBB%v+P%v-PB%v*2.0D00)/HY2)+((PBL%v+PBR%v-PB%v*2.0D00
     +)/HX2))
      PLLAP%v = (((PBL%v+PTL%v-PL%v*2.0D00)/HY2)+((PLL%v+P%v-PL%v*2.0D00
     +)/HX2))
      PLAP%v = (((PB%v+PT%v-P%v*2.0D00)/HY2)+((PL%v+PR%v-P%v*2.0D00)/HX2
     +))
      PRLAP%v = (((PBR%v+PTR%v-PR%v*2.0D00)/HY2)+((P%v+PRR%v-PR%v*2.0D00
     +)/HX2))
      PTLAP%v = (((P%v+PTT%v-PT%v*2.0D00)/HY2)+((PTL%v+PTR%v-PT%v*2.0D00
     +)/HX2))
          end if 
        end subroutine bar
